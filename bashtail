#!/bin/bash

CURL_TIMEOUT=60
LOKI_API_URL=/loki/api/v1/push
LOKI_PORT=3100

# ---

function problem {
  case $1 in
    empty)
      echo -e "\e[31m${ERR_MSG} not specified !\e[m"
      $0 --help
      exit 10
    ;;
  esac
}

# ---

for arg in $@; do
  case $arg in
    --lokiurl=*) LOKI_URL=$(echo $arg | cut -d "=" -f2)
    ;;
    --filename=*) FILENAME=$(echo $arg | cut -d "=" -f2)
    ;;
    --instance=*) INSTANCE=$(echo $arg | cut -d "=" -f2)
    ;;
    --help)
      declare -i TERMINAL_WIDTH=$(stty -a | grep -Po '(?<=columns )\d+')
      for i in $(eval echo {1..$TERMINAL_WIDTH}); do echo -n '-'; done
      echo -e "\e[1m\nshtail is a BASH script to send data to Loki (https://grafana.com/oss/loki/) via it's API"
      echo -e "\e[1mUsage:\e[m $0 --lokiurl=<URL of your Loki instance, for example: http://loki.myorg.com> --filename=<path to your log in JSON format> --instance=<name of your instance, for example $(hostname -s)"
      for i in $(eval echo {1..$TERMINAL_WIDTH}); do echo -n '-'; done
      echo
      exit 0
    ;;
    *) echo -e "\e[31m(basename $0) wrong usage ! \e[m"; exit 42
    ;;
  esac
done

if [[ -z ${LOKI_URL} ]]; then ERR_MSG="--lokiurl";  problem empty; fi
if [[ -z ${FILENAME} ]]; then ERR_MSG="--filename"; problem empty; fi
if [[ -z ${INSTANCE} ]]; then ERR_MSG="--instance"; problem empty; fi

# ---

# Set variable with the filename of the log
FILENAME_BASENAME=$(basename "${FILENAME}")

# Load file content and clear file
LOG_CONTENT=$(cat "${FILENAME}")

# Check if we got any logs
if (( $(cat "${FILENAME}" | wc -l) < 1 )); then
  echo -e "\e[33mFile:\e[m ${FILENAME}\e[33m is empty.\e[m"
exit
fi

# Process log content line per line
echo "${LOG_CONTENT}" | while read LOG_LINE; do

  # Seconds since epoch: date +%s
  NS_SINCE_UNIX_EPOCH=$(date +%s%N)

  curl \
    --connect-timeout ${CURL_TIMEOUT} \
    --fail \
    --header "Content-Type: application/json" \
    -X POST "${LOKI_URL}:${LOKI_PORT}${LOKI_API_URL}" \
    --data-raw '{"streams": [{ "stream": { "instance": "'"$INSTANCE"'", "job": "'"$FILENAME_BASENAME"'" }, "values": [ [ "'"$NS_SINCE_UNIX_EPOCH"'", "'"$FILENAME_BASENAME"'", '"$LOG_LINE"' ] ] }]}'

  if ! [[ $? -eq 0 ]]; then
    echo -e "\e[31mFailed to send data to\e[m ${LOKI_URL}\e[31m !!! \e[m"
    exit 43
  fi

done

# Current timestamp for file archive
TIMESTAMP=$(date --iso-8601=seconds | tr : _)

# Current directory where log exists
LOG_DIR=$(dirname "${FILENAME}")

# Archive log content and clear file
mkdir -p "${LOG_DIR}/old"
tar czpf "${LOG_DIR}/old/${FILENAME_BASENAME}.${TIMESTAMP}.tar.gz" -C "${LOG_DIR}" "${FILENAME_BASENAME}" \
  && >"${FILENAME}"
